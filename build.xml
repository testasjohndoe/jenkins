<?xml version="1.0" encoding="UTF-8"?>
<project name="name-of-project" default="build">
    <!-- By default, we assume all tools to be on the $PATH -->
    <!-- <property name="toolsdir" value=""/>-->

    <!-- Uncomment the following when the tools are in ${basedir}/vendor/bin -->
    <property name="toolsdir" value="${basedir}/vendor/bin/"/>
    <property name="composer" value="${basedir}/build/composer.phar"/>
    <property name="artisan" value="${basedir}/artisan"/>

    <target name="build"
            depends="docker,composer,prepare,phpmd-ci,phpcs-ci,phpcpd-ci,clear-db,migrate,seed,npm,webpack"
            description="">
    </target>

    <target name="build-parallel"
            depends="docker,prepare,lint,tools-parallel"
            description=""/>

    <target name="tools-parallel" description="Run tools in parallel">
        <parallel threadCount="2">
            <antcall target="phpmd-ci"/>
            <antcall target="phpcpd-ci"/>
            <antcall target="phpcs-ci"/>
            <antcall target="lint"/>
        </parallel>
    </target>

    <target name="clean"
            unless="clean.done"
            description="Cleanup build artifacts">
        <delete dir="${basedir}/build/api"/>
        <delete dir="${basedir}/build/coverage"/>
        <delete dir="${basedir}/build/logs"/>
        <property name="clean.done" value="true"/>
    </target>

    <target name="prepare"
            unless="prepare.done"
            depends="docker,clean"
            description="Prepare for build">
        <mkdir dir="${basedir}/build/api"/>
        <mkdir dir="${basedir}/build/coverage"/>
        <mkdir dir="${basedir}/build/logs"/>
        <property name="prepare.done" value="true"/>
    </target>

    <target name="lint" description="Perform syntax check of sourcecode files">
        <apply executable="make" failonerror="true">
            <arg value="php"/>
            <arg value="-l"/>

            <fileset dir="${basedir}/app">
                <include name="**/*.php"/>
                <modified/>
            </fileset>
        </apply>
    </target>

    <target name="phpmd"
            description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="make" resultproperty="phpmd.result">
            <arg value="php-fpm"/>
            <arg value="${toolsdir}phpmd"/>
            <arg path="${basedir}/app"/>
            <arg value="text"/>
            <arg value="codesize,unusedcoderules.xml"/>
        </exec>
    </target>

    <target name="phpmd-ci"
            depends="docker,prepare"
            description="Perform project mess detection using PHPMD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="make">
            <arg value="php-fpm"/>
            <arg value="${toolsdir}phpmd"/>
            <arg path="${basedir}/app"/>
            <arg value="xml"/>
            <arg value="codesize,unusedcoderules.xml"/>
            <arg value="--reportfile"/>
            <arg path="${basedir}/build/logs/pmd.xml"/>
        </exec>
    </target>

    <target name="phpcs"
            description="Find coding standard violations using PHP_CodeSniffer and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="make" resultproperty="phpcs.result">
            <arg value="php-fpm"/>
            <arg value="${toolsdir}phpcs"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore='*/database/*, */migrations/*, */views/*, autoload.php'"/>
            <arg path="${basedir}/app"/>
            <arg path="${basedir}/tests"/>
        </exec>
    </target>

    <target name="phpcs-ci"
            depends="docker,prepare"
            description="Find coding standard violations using PHP_CodeSniffer and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="make" output="/dev/null">
            <arg value="php-fpm"/>
            <arg value="${toolsdir}phpcs"/>
            <arg value="--report=checkstyle"/>
            <arg value="--report-file=${basedir}/build/logs/checkstyle.xml"/>
            <arg value="--standard=PSR2"/>
            <arg value="--extensions=php"/>
            <arg value="--ignore='*/database/*, */migrations/*, */views/*, autoload.php'"/>
            <arg path="${basedir}/app"/>
        </exec>
    </target>

    <target name="phpcpd"
            description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
        <exec executable="make" resultproperty="phpcpd.result">
            <arg value="php-fpm"/>
            <arg value="${toolsdir}phpcpd"/>
            <arg path="${basedir}/app"/>
        </exec>
    </target>

    <target name="phpcpd-ci"
            depends="docker,prepare"
            description="Find duplicate code using PHPCPD and log result in XML format. Intended for usage within a continuous integration environment.">
        <exec executable="make">
            <arg value="php-fpm"/>
            <arg value="${toolsdir}phpcpd"/>
            <arg value="--log-pmd"/>
            <arg path="${basedir}/build/logs/pmd-cpd.xml"/>
            <arg path="${basedir}/app"/>
        </exec>
    </target>

    <target name="migrate"
            unless="migrate.done"
            depends="docker,prepare"
            description="Run migrations">
        <exec executable="make" resultproperty="result.migrate" taskname="migrate">
            <arg value="php" />
            <arg value="${artisan}" />
            <arg value="migrate:refresh" />
            <arg value="--force" />
        </exec>

        <property name="migrate.done" value="true"/>
    </target>

    <target name="seed"
            unless="seed.done"
            depends="docker,prepare"
            description="Run migrations">
        <exec executable="make" resultproperty="result.seed" taskname="seed">
            <arg value="php" />
            <arg value="${artisan}" />
            <arg value="db:seed" />
            <arg value="--force" />
        </exec>

        <property name="seed.done" value="true"/>
    </target>

    <target name="npm"
            unless="npm.done"
            depends="docker,prepare,migrate,seed"
            description="Download npm packages">
        <exec executable="make" resultproperty="result.npm" taskname="npm">
            <arg value="yarn"/>
            <arg value="yarn"/>
            <arg value="install"/>
        </exec>

        <property name="npm.done" value="true"/>
    </target>

    <target name="webpack"
            unless="webpack.done"
            depends="docker,npm"
            description="Build frontend">
        <exec executable="make" resultproperty="result.webpack" taskname="webpack">
            <arg value="yarn"/>
            <arg value="yarn"/>
            <arg value="run"/>
            <arg value="dev"/>
        </exec>

        <property name="webpack.done" value="true"/>
    </target>

    <target name="composer-check" depends="docker,prepare">
        <available file="${composer}" property="composer.present"/>
    </target>

    <target name="composer-download" depends="docker,composer-check" unless="composer.present">
        <property name="composer.noselfupdate" value="true"/>
        <get src="https://getcomposer.org/composer.phar" dest="${composer}"/>
    </target>

    <target name="composer-selfupdate" depends="docker,composer-download" unless="composer.noselfupdate">
        <exec executable="docker-compose">
            <arg value="exec"/>
            <arg value="-T"/>
            <arg value="php-fpm"/>
            <arg value="${composer}"/>
            <arg value="self-update"/>
            <arg value="--quiet"/>
        </exec>
    </target>

    <target name="composer" depends="docker,composer-selfupdate" description="Run composer update">
        <exec executable="docker-compose" resultproperty="composer.result">
            <arg value="exec"/>
            <arg value="-T"/>
            <arg value="php-fpm"/>
            <arg value="${composer}"/>
            <arg value="install"/>
        </exec>
        <exec executable="docker-compose">
            <arg value="exec"/>
            <arg value="-T"/>
            <arg value="php-fpm"/>
            <arg value="php" />
            <arg value="${artisan}" />
            <arg value="key:generate" />
        </exec>
    </target>

    <target name="docker" description="Starts docker containers">
        <exec executable="make">
            <arg value="start" />
        </exec>
    </target>

    <target name="clear-db" depends="docker,composer" description="Run composer update">
        <exec executable="make" resultproperty="composer.result">
            <arg value="php"/>
            <arg value="${artisan}"/>
            <arg value="db:truncate"/>
        </exec>
    </target>
</project>
